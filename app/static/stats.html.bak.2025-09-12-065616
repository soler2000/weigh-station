<!doctype html>
<html>
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>Weigh Station – Statistics</title>
  <link rel="stylesheet" href="/static/styles.css?v=statsstable">
</head>
<body>


<main id="panel" class="neutral">
  <div class="card" style="padding:14px;margin-bottom:16px">
    <div class="row" style="display:flex;gap:12px;flex-wrap:wrap;align-items:center">
      <label for="variant">Variant</label>
      <select id="variant" style="min-width:220px"></select>
      <label for="from" style="margin-left:8px">From</label><input id="from" type="date">
      <label for="to">To</label><input id="to" type="date">
      <label for="bins">Bins</label><input id="bins" type="number" min="5" max="200" value="20" style="width:90px">
      <button id="refresh">Refresh</button>
    </div>
  </div>

  <div class="card" style="padding:14px;margin-bottom:16px;overflow-x:auto">
    <table id="statsTable" class="stats-table" style="border-collapse:separate;border-spacing:0 8px;min-width:620px;font-size:1.15rem">
      <tbody>
        <tr><th style="text-align:left;padding-right:16px;">Total</th><td id="t_total" style="font-weight:700;">0</td>
            <th style="text-align:left;padding-left:32px;padding-right:16px;">Pass</th><td id="t_pass" style="font-weight:700;">0</td>
            <th style="text-align:left;padding-left:32px;padding-right:16px;">Fail</th><td id="t_fail" style="font-weight:700;">0</td></tr>
        <tr><th style="text-align:left;padding-right:16px;">Mean</th><td id="t_mean">–</td>
            <th style="text-align:left;padding-left:32px;padding-right:16px;">σ</th><td id="t_sigma">–</td>
            <th style="text-align:left;padding-left:32px;padding-right:16px;">Cp</th><td id="t_cp">–</td></tr>
        <tr><th style="text-align:left;padding-right:16px;">Cpk</th><td id="t_cpk">–</td>
            <th style="text-align:left;padding-left:32px;padding-right:16px;">Spec</th>
            <td colspan="3" id="t_spec">–</td></tr>
      </tbody>
    </table>
  </div>

  <div class="card" style="padding:14px">
    <div class="chartBox" style="width:100%;height:840px;position:relative">
      <canvas id="hist"></canvas>
    </div>
    <div class="legend" id="legend" style="margin-top:10px;color:#444"></div>
  </div>
</main>

<script>
const sel=document.getElementById('variant'),fromI=document.getElementById('from'),toI=document.getElementById('to'),binsI=document.getElementById('bins');
const cvs=document.getElementById('hist'),ctx=cvs.getContext('2d'),legend=document.getElementById('legend');
function fmt(x,d=3){return(x===null||x===undefined||Number.isNaN(Number(x)))?'–':Number(x).toFixed(d);}
async function loadVariants(){
  const r=await fetch('/api/variants',{cache:'no-store'}); const vs=await r.json();
  sel.innerHTML=vs.map(v=>`<option value="${v.id}" data-min="${v.min_g}" data-max="${v.max_g}">${v.name} [${v.min_g}-${v.max_g} g]</option>`).join('');
  const now=new Date(), d7=new Date(now.getTime()-6*86400000);
  toI.value=now.toISOString().slice(0,10); fromI.value=d7.toISOString().slice(0,10);
}
function drawHistogram(edges,counts,lsl,usl){
  const W=cvs.clientWidth,H=cvs.clientHeight; cvs.width=W; cvs.height=H;
  const left=45,right=15,top=20,bottom=40,x0=left,x1=W-right,y0=H-bottom,y1=top;
  ctx.clearRect(0,0,W,H);
  ctx.strokeStyle='#888';ctx.beginPath();ctx.moveTo(x0,y0);ctx.lineTo(x1,y0);ctx.moveTo(x0,y0);ctx.lineTo(x0,y1);ctx.stroke();
  const maxC=Math.max(1,...counts),n=counts.length,band=(x1-x0)/n;
  for(let i=0;i<n;i++){const h=(y0-y1)*(counts[i]/maxC);const bx=x0+i*band+1;const bw=Math.max(1,band-2);ctx.fillStyle='#aac1ff';ctx.fillRect(bx,y0-h,bw,h);}
  ctx.fillStyle='#444';ctx.font='12px system-ui';
  for(let i=0;i<=4;i++){const c=i*maxC/4;const y=y0-(y0-y1)*(c/maxC);ctx.fillText(Math.round(c),2,y+4);ctx.strokeStyle='#eee';ctx.beginPath();ctx.moveTo(x0,y);ctx.lineTo(x1,y);ctx.stroke();}
  const lo=edges[0],hi=edges[edges.length-1], xOf=v=>x0+(v-lo)/(hi-lo)*(x1-x0);
  ctx.strokeStyle='#cc0000';ctx.setLineDash([6,4]);
  if(lsl!=null&&lsl>lo&&lsl<hi){const x=xOf(lsl);ctx.beginPath();ctx.moveTo(x,y0);ctx.lineTo(x,y1);ctx.stroke();}
  if(usl!=null&&usl>lo&&usl<hi){const x=xOf(usl);ctx.beginPath();ctx.moveTo(x,y0);ctx.lineTo(x,y1);ctx.stroke();}
  ctx.setLineDash([]); ctx.textAlign='center';
  ctx.fillText(lo.toFixed(2),x0,H-8); ctx.fillText(((lo+hi)/2).toFixed(2),(x0+x1)/2,H-8); ctx.fillText(hi.toFixed(2),x1,H-8);
}
async function refresh(){
  const id=sel.value; if(!id){return alert('Choose a variant');}
  const q=new URLSearchParams(); q.set('variant_id',id);
  if(fromI.value) q.set('frm',fromI.value); if(toI.value) q.set('to',toI.value);
  q.set('bins',binsI.value||'20');
  const r=await fetch('/api/stats/distribution?'+q.toString(),{cache:'no-store'}); if(!r.ok){return alert('Failed to load');}
  const d=await r.json();
  // KPI table
  document.getElementById('t_total').textContent=d.count??0;
  document.getElementById('t_pass').textContent =d.pass??0;
  document.getElementById('t_fail').textContent =d.fail??0;
  document.getElementById('t_mean').textContent =fmt(d.mean,3);
  document.getElementById('t_sigma').textContent=fmt(d.stdev,3);
  document.getElementById('t_cp').textContent   =fmt(d.cp,3);
  document.getElementById('t_cpk').textContent  =fmt(d.cpk,3);
  document.getElementById('t_spec').textContent =`LSL=${fmt(d.lsl,2)} g • USL=${fmt(d.usl,2)} g`;
  // Histogram
  const edges=d.bins?.edges||[], counts=d.bins?.counts||[];
  if(edges.length>1 && counts.length>0){
    drawHistogram(edges,counts,d.lsl,d.usl);
    legend.textContent=`Spec: LSL=${fmt(d.lsl,2)} g • USL=${fmt(d.usl,2)} g • Yield=${fmt(d.yield,3)}`;
  } else {
    ctx.clearRect(0,0,cvs.width,cvs.height); legend.textContent='No data in the selected range.';
  }
}
document.addEventListener('click', e => { if(e.target && e.target.id==='refresh'){ refresh(); } });
(async function(){ await loadVariants(); await refresh(); })();
</script>
</main>
</body>
</html>

</html>
